#pragma checksum "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a596fb1ce61c530ad09082a39e73170b67ebfdb3"
// <auto-generated/>
#pragma warning disable 1591
namespace MemoryGame.Component
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using MemoryGame;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using MemoryGame.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\_Imports.razor"
using MemoryGame.Component;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
    public partial class GameComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "class", "game");
            __builder.AddAttribute(2, "b-zv4ssyz2yc");
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "style", "width:100vw;");
            __builder.AddAttribute(5, "class", "d-flex justify-content-center");
            __builder.AddAttribute(6, "b-zv4ssyz2yc");
            __builder.OpenElement(7, "div");
            __builder.AddAttribute(8, "class", "top-menu-game d-flex flex-row");
            __builder.AddAttribute(9, "b-zv4ssyz2yc");
            __builder.OpenElement(10, "div");
            __builder.AddAttribute(11, "class", "h-100 d-flex justify-content-center align-items-center w-60");
            __builder.AddAttribute(12, "b-zv4ssyz2yc");
#nullable restore
#line 13 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                 if (bestTime is not null)
                {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(13, "span");
            __builder.AddAttribute(14, "style", "font-size: 2rem;");
            __builder.AddAttribute(15, "class", "font-cursive");
            __builder.AddAttribute(16, "b-zv4ssyz2yc");
            __builder.AddMarkupContent(17, "\r\n                        Personal best time: ");
            __builder.AddContent(18, 
#nullable restore
#line 16 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                             bestTime

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 18 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                }
                else
                {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(19, "<span style=\"font-size: 1.7rem;\" class=\"font-cursive\" b-zv4ssyz2yc>\r\n                        Complete the game to have personal best\r\n                    </span>");
#nullable restore
#line 24 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(20, "\r\n            ");
            __builder.OpenElement(21, "div");
            __builder.AddAttribute(22, "class", "h-100 d-flex justify-content-center align-items-center w-20");
            __builder.AddAttribute(23, "b-zv4ssyz2yc");
            __builder.OpenElement(24, "button");
            __builder.AddAttribute(25, "class", "w-100 h-100 bg-transparent ");
            __builder.AddAttribute(26, "style", "outline:none;");
            __builder.AddAttribute(27, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 27 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                                                                            ResetGame

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(28, "b-zv4ssyz2yc");
            __builder.AddMarkupContent(29, "<i class=\"fas fa-redo-alt\" style=\" font-size: 2.5rem;\" b-zv4ssyz2yc></i>");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(30, "\r\n            ");
            __builder.OpenElement(31, "div");
            __builder.AddAttribute(32, "class", "h-100 d-flex justify-content-center align-items-center w-20");
            __builder.AddAttribute(33, "b-zv4ssyz2yc");
            __builder.OpenElement(34, "button");
            __builder.AddAttribute(35, "class", "w-100 h-100 bg-transparent");
            __builder.AddAttribute(36, "style", "outline:none;");
            __builder.AddAttribute(37, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 32 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                                                                           (() => { componentsService.homePage.OpenMenu(); })

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(38, "b-zv4ssyz2yc");
            __builder.AddMarkupContent(39, "<i class=\"fas fa-cog font-size-icon-sett\" style=\" font-size: 2.5rem;\" b-zv4ssyz2yc></i>");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(40, "\r\n    ");
            __builder.OpenElement(41, "div");
            __builder.AddAttribute(42, "class", "d-flex flex-column h-100 w-100 justify-content-center");
            __builder.AddAttribute(43, "b-zv4ssyz2yc");
            __builder.OpenElement(44, "div");
            __builder.AddAttribute(45, "class", "timer d-flex justify-content-center align-items-center");
            __builder.AddAttribute(46, "b-zv4ssyz2yc");
#nullable restore
#line 40 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
             if (isGameOver)
            {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(47, "<span style=\"font-size: 3rem;color:red;\" class=\"font-cursive\" b-zv4ssyz2yc>\r\n                    Game Over!!!\r\n                </span>");
#nullable restore
#line 45 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
            }
            else
            {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(48, "span");
            __builder.AddAttribute(49, "style", "font-size: 3rem;");
            __builder.AddAttribute(50, "class", "font-cursive");
            __builder.AddAttribute(51, "b-zv4ssyz2yc");
            __builder.AddContent(52, 
#nullable restore
#line 49 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                     ConvertTime(timeSEC)

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
#nullable restore
#line 51 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
            }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(53, "\r\n        ");
            __builder.OpenElement(54, "div");
            __builder.AddAttribute(55, "class", "d-flex w-100 flex-column");
            __builder.AddAttribute(56, "style", "aspect-ratio:" + " 1/1;" + (
#nullable restore
#line 53 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                                                        gameOverStyle

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(57, "b-zv4ssyz2yc");
#nullable restore
#line 54 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
             for (int i = 0; i < settings.amount; i++)
            {
                var percentage = ((decimal)100 / settings.amount).ToString(CultureInfo.InvariantCulture);

#line default
#line hidden
#nullable disable
            __builder.OpenElement(58, "div");
            __builder.AddAttribute(59, "class", "d-flex w-100 position-relative");
            __builder.AddAttribute(60, "style", "height:" + (
#nullable restore
#line 57 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                                                           percentage

#line default
#line hidden
#nullable disable
            ) + "%");
            __builder.AddAttribute(61, "b-zv4ssyz2yc");
#nullable restore
#line 58 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                     for (int j = 0; j < settings.amount; j++)
                    {
                        var iLocal = i;
                        var jLocal = j;
                        var index = i.ToString() + j.ToString();
                        var idFront = "front" + index;
                        var idBack = "back" + index;

#line default
#line hidden
#nullable disable
            __builder.OpenElement(62, "div");
            __builder.AddAttribute(63, "class", "d-flex h-100 justify-content-center align-items-center t");
            __builder.AddAttribute(64, "style", "width:" + (
#nullable restore
#line 65 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                                                                                            percentage

#line default
#line hidden
#nullable disable
            ) + "%;" + " perspective:1000px");
            __builder.AddAttribute(65, "b-zv4ssyz2yc");
            __builder.OpenElement(66, "div");
            __builder.AddAttribute(67, "id", 
#nullable restore
#line 66 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                      idFront

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(68, "class", "front");
            __builder.AddAttribute(69, "style", "width: 93%;");
            __builder.AddAttribute(70, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 66 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                                                                           (() => FlipCard(index,iLocal,jLocal))

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(71, "b-zv4ssyz2yc");
            __builder.CloseElement();
            __builder.AddMarkupContent(72, "\r\n                            ");
            __builder.OpenElement(73, "div");
            __builder.AddAttribute(74, "id", 
#nullable restore
#line 68 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                      idBack

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(75, "class", "back d-flex justify-content-center align-items-center");
            __builder.AddAttribute(76, "style", "width: 93%;");
            __builder.AddAttribute(77, "b-zv4ssyz2yc");
#nullable restore
#line 69 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                  var path = iconsPathMatrix[i, j]; 

#line default
#line hidden
#nullable disable
            __builder.OpenElement(78, "img");
            __builder.AddAttribute(79, "src", 
#nullable restore
#line 70 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                                           path

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(80, "style", "max-height:80%;max-width:80%;");
            __builder.AddAttribute(81, "b-zv4ssyz2yc");
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line 73 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
                    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 75 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
            }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 81 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
       
    [Parameter]
    public string[,] iconsPathMatrix { get; set; }

    private bool isGameOver { get; set; }
    private bool isFlipCardRunning { get; set; }

    private bool[,] flippedCardsMatrix { get; set; }
    private int[,] flippeCardPairIndex { get; set; }

    private double timeSEC  = 0;
    private double difficultyTime { get; set; }

    private string bestTime { get; set; }
    private string gameOverStyle { get; set; }

    private System.Timers.Timer timer { get; set; }

    protected async override Task OnInitializedAsync()
    {
        componentsService.gameComponent = this;
        var score = await BrowserStorage.GetAsync<string>("Score_" + settings.amount + "_" + settings.difficulty);
        if (score.Success)
        {
            bestTime = score.Value;
        }

        timer = new System.Timers.Timer(100);
        switch (settings.difficulty)
        {
            case 0:
                timer.Elapsed += TimeUPEvent;
                timer.Enabled = true;
                break;
            case 1:
                switch (settings.amount)
                {
                    case 2:
                        timeSEC = 10;
                        difficultyTime = 10;
                        break;
                    case 4:
                        timeSEC = 40;
                        difficultyTime = 40;
                        break;
                    case 6:
                        timeSEC = 90;
                        difficultyTime = 90;
                        break;
                    case 8:
                        timeSEC = 160;
                        difficultyTime = 160;
                        break;
                    default:
                        break;
                }
                timer.Elapsed += TimeDOWNEvent;
                timer.Enabled = true;
                break;
            case 2:
                switch (settings.amount)
                {
                    case 2:
                        timeSEC = 10;
                        difficultyTime = 10;
                        break;
                    case 4:
                        timeSEC = 80;
                        difficultyTime = 80;
                        break;
                    case 6:
                        timeSEC = 180;
                        difficultyTime = 180;
                        break;
                    case 8:
                        timeSEC = 320;
                        difficultyTime = 320;
                        break;
                    default:
                        break;
                }
                timer.Elapsed += TimeDOWNEvent;
                timer.Enabled = true;
                break;
            default:
                break;
        }

        flippeCardPairIndex = new int[2, 2];
        flippeCardPairIndex[0, 0] = -1;
        flippeCardPairIndex[0, 1] = -1;
        flippeCardPairIndex[1, 0] = -1;
        flippeCardPairIndex[1, 1] = -1;
        flippedCardsMatrix = new bool[settings.amount, settings.amount];
    }

    private string ConvertTime(double seconds)
    {
        return string.Format(@"{0:mm\:ss\.f}", TimeSpan.FromSeconds(seconds));
    }

    private void TimeUPEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        timeSEC += 0.1;
        InvokeAsync(StateHasChanged);

    }

    private void TimeDOWNEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        timeSEC -= 0.1;
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 192 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
         if (timeSEC <= 0)
        {
            timer.Stop();
            isGameOver = true;
            gameOverStyle = "pointer-events: none;";
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 197 "C:\Users\jarek\Documents\repos\simple-memory-game\MemoryGame\MemoryGame\Component\GameComponent.razor"
         
        InvokeAsync(StateHasChanged);
    }

    private async Task ResetGame()
    {
        timer.Stop();
        isGameOver = false;
        gameOverStyle = "pointer-events: none;";
        StateHasChanged();

        for (int i = 0; i < flippedCardsMatrix.GetLength(0); i++)
        {
            for (int j = 0; j < flippedCardsMatrix.GetLength(1); j++)
            {
                if (flippedCardsMatrix[i, j])
                {
                    await JsRuntime.InvokeAsync<string>("flipback", i.ToString() + j.ToString());
                }
            }
        }
        await Task.Delay(500);

        iconsPathMatrix = new string[settings.amount, settings.amount];
        var random = new Random();
        var randomOrderOfNumbers = Enumerable.Range(0, settings.amount * settings.amount / 2).Select(x => x).Concat(Enumerable.Range(0, settings.amount * settings.amount / 2).Select(x => x)).OrderBy(x => random.Next()).Take(settings.amount * settings.amount).ToList();
        int index = 0;

        for (int i = 0; i < settings.amount; i++)
        {
            for (int j = 0; j < settings.amount; j++)
            {
                iconsPathMatrix[i, j] = "\\icons\\" + randomOrderOfNumbers[index] + ".svg";
                index++;
            }
        }

        timer = new System.Timers.Timer(100);

        switch (settings.difficulty)
        {
            case 0:
                timeSEC = 0;
                timer.Elapsed += TimeUPEvent;
                timer.Enabled = true;
                break;
            case 1:
                switch (settings.amount)
                {
                    case 2:
                        timeSEC = 10;
                        difficultyTime = 10;
                        break;
                    case 4:
                        timeSEC = 40;
                        difficultyTime = 40;
                        break;
                    case 6:
                        timeSEC = 90;
                        difficultyTime = 90;
                        break;
                    case 8:
                        timeSEC = 160;
                        difficultyTime = 160;
                        break;
                    default:
                        break;
                }
                timer.Elapsed += TimeDOWNEvent;
                timer.Enabled = true;
                break;
            case 2:
                switch (settings.amount)
                {
                    case 2:
                        timeSEC = 10;
                        difficultyTime = 10;
                        break;
                    case 4:
                        timeSEC = 80;
                        difficultyTime = 80;
                        break;
                    case 6:
                        timeSEC = 180;
                        difficultyTime = 180;
                        break;
                    case 8:
                        timeSEC = 320;
                        difficultyTime = 320;
                        break;
                    default:
                        break;
                }
                timer.Elapsed += TimeDOWNEvent;
                timer.Enabled = true;
                break;
            default:
                break;
        }

        flippeCardPairIndex = new int[2, 2];
        flippeCardPairIndex[0, 0] = -1;
        flippeCardPairIndex[0, 1] = -1;
        flippeCardPairIndex[1, 0] = -1;
        flippeCardPairIndex[1, 1] = -1;
        flippedCardsMatrix = new bool[settings.amount, settings.amount];
        gameOverStyle = "";
        timer.Start();
        StateHasChanged();
    }

    private async Task FlipCard(string index, int i, int j)
    {
        if (!isFlipCardRunning)
        {
            isFlipCardRunning = true;

            if (!flippedCardsMatrix[i, j])
            {
                if (flippeCardPairIndex[0, 0] == -1)            //if there is no
                {
                    await JsRuntime.InvokeAsync<string>("flip", index);
                    flippedCardsMatrix[i, j] = true;
                    flippeCardPairIndex[0, 0] = i;
                    flippeCardPairIndex[0, 1] = j;
                }
                else                                          //if one card is flipped
                {
                    await JsRuntime.InvokeAsync<string>("flip", index);
                    await Task.Delay(500);
                    flippedCardsMatrix[i, j] = true;
                    flippeCardPairIndex[1, 0] = i;
                    flippeCardPairIndex[1, 1] = j;

                    //if cards are different
                    if (iconsPathMatrix[flippeCardPairIndex[0, 0], flippeCardPairIndex[0, 1]] != iconsPathMatrix[i, j])
                    {

                        //if difficulty is hard (then flipback all cards)
                        if (settings.difficulty==2)
                        {
                            for (int k = 0; k < flippedCardsMatrix.GetLength(0); k++)
                            {
                                for (int l = 0; l < flippedCardsMatrix.GetLength(1); l++)
                                {
                                    if (flippedCardsMatrix[k, l])
                                    {
                                        flippedCardsMatrix[k, l] = false;
                                        await JsRuntime.InvokeAsync<string>("flipback", k.ToString() + l.ToString());
                                    }
                                }
                            }
                            await Task.Delay(500);
                        }
                        //else flipback only last pair
                        else                            
                        {
                            await JsRuntime.InvokeAsync<string>("flipback", flippeCardPairIndex[0, 0].ToString() + flippeCardPairIndex[0, 1].ToString());
                            await JsRuntime.InvokeAsync<string>("flipback", flippeCardPairIndex[1, 0].ToString() + flippeCardPairIndex[1, 1].ToString());
                            flippedCardsMatrix[i, j] = false;
                            flippedCardsMatrix[flippeCardPairIndex[0, 0], flippeCardPairIndex[0, 1]] = false;
                        }
                    }
                    //if two cards matches
                    else
                    {
                        if (IsGameCompleted())
                        {
                            timer.Stop();
                            var bestOldScore = await BrowserStorage.GetAsync<string>("Score_" + settings.amount+"_"+settings.difficulty);
                            if (bestOldScore.Success)
                            {
                                //to convert to TimeSpan i need to add '0:' to string
                                TimeSpan ts = TimeSpan.Parse("0:" + bestOldScore.Value);
                                switch (settings.difficulty)
                                {
                                    case 0:
                                        int resultEasy = TimeSpan.Compare(ts, TimeSpan.Parse("0:" + ConvertTime(timeSEC)));
                                        if (resultEasy == 1)
                                        {
                                            await BrowserStorage.SetAsync("Score_" + settings.amount + "_" + settings.difficulty, ConvertTime(timeSEC));
                                            bestTime = ConvertTime(timeSEC);
                                        }
                                        break;
                                    case 1:
                                        int resultNormal = TimeSpan.Compare(ts, TimeSpan.Parse("0:" + ConvertTime(difficultyTime - timeSEC)));
                                        if (resultNormal == 1)
                                        {
                                            await BrowserStorage.SetAsync("Score_" + settings.amount + "_" + settings.difficulty, ConvertTime(difficultyTime - timeSEC));
                                            bestTime = ConvertTime(difficultyTime - timeSEC);
                                        }
                                        break;
                                    case 2:
                                        int resultHard = TimeSpan.Compare(ts, TimeSpan.Parse("0:" + ConvertTime(difficultyTime - timeSEC)));
                                        if (resultHard == 1)
                                        {
                                            await BrowserStorage.SetAsync("Score_" + settings.amount + "_" + settings.difficulty, ConvertTime(difficultyTime - timeSEC));
                                            bestTime = ConvertTime(difficultyTime - timeSEC);
                                        }
                                        break;
                                    default:
                                        break;
                                }

                            }
                            else
                            {
                                switch (settings.difficulty)
                                {
                                    case 0:
                                        await BrowserStorage.SetAsync("Score_" + settings.amount + "_" + settings.difficulty, ConvertTime(timeSEC));
                                        bestTime = ConvertTime(timeSEC);
                                        break;
                                    case 1:
                                        await BrowserStorage.SetAsync("Score_" + settings.amount + "_" + settings.difficulty, ConvertTime(difficultyTime - timeSEC));
                                        bestTime = ConvertTime(difficultyTime - timeSEC);
                                        break;
                                    case 2:
                                        await BrowserStorage.SetAsync("Score_" + settings.amount + "_" + settings.difficulty, ConvertTime(difficultyTime - timeSEC));
                                        bestTime = ConvertTime(difficultyTime - timeSEC);
                                        break;
                                    default:
                                        break;
                                }

                            }
                            StateHasChanged();
                        }
                    }

                    flippeCardPairIndex[0, 0] = -1;
                    flippeCardPairIndex[0, 1] = -1;
                    flippeCardPairIndex[1, 0] = -1;
                    flippeCardPairIndex[1, 1] = -1;
                }
            }

            isFlipCardRunning = false;
        }
    }

    private bool IsGameCompleted()
    {
        for (int i = 0; i < flippedCardsMatrix.GetLength(0); i++)
        {
            for (int j = 0; j < flippedCardsMatrix.GetLength(1); j++)
            {
                if (!flippedCardsMatrix[i, j])
                {
                    return false;
                }
            }
        }
        return true;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.ComponentsService componentsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.Settings settings { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedLocalStorage BrowserStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
    }
}
#pragma warning restore 1591
